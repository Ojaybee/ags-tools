# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AGS2DB
								 A QGIS plugin
 This plugin parses an AGS file and creates an SQlite database from it
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							  -------------------
		begin                : 2023-04-19
		copyright            : (C) 2023 by Oliver Burdekin / burdGIS
		email                : info@burdgis.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Oliver Burdekin / burdGIS'
__date__ = '2023-04-19'
__copyright__ = '(C) 2023 by Oliver Burdekin / burdGIS'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication, QSettings
from qgis.core import (QgsProcessingAlgorithm,
					   QgsProcessingParameterFile,
					   QgsProcessingParameterFileDestination,
					   QgsProcessingParameterEnum,
					   )
import os
import requests

class AGSValidatorAlgorithm(QgsProcessingAlgorithm):
	"""
	This is the algorithm class for the AGS validator.
	"""

	# Define constants for the algorithm's parameters
	INPUT = 'INPUT'
	DICTIONARY = 'DICTIONARY'
	CHECKERS = 'CHECKERS'
	OUTPUT = 'OUTPUT'
	
	# Define constants for the dictionary choices and checker options
	DICTIONARY_OPTIONS = ['None', 'v4_0_3', 'v4_0_4', 'v4_1', 'v4_1_1']  # replace with your actual options
	CHECKER_OPTIONS = ['ags', 'bgs']  # replace with your actual options

	def initAlgorithm(self, config):
		"""
		Here we define the inputs and output of the algorithm, along
		with some other properties.
		"""

		# Define the inputs for the algorithm
		self.addParameter(
			QgsProcessingParameterFile(
				self.INPUT,
				self.tr("Input File"),
				behavior=QgsProcessingParameterFile.File,
				fileFilter="All files (*.*)"
			)
		)
		self.addParameter(
			QgsProcessingParameterEnum(
				self.DICTIONARY,
				self.tr("Dictionary"),
				options=self.DICTIONARY_OPTIONS,
				defaultValue=0
			)
		)
		self.addParameter(
			QgsProcessingParameterEnum(
				self.CHECKERS,
				self.tr("Checkers"),
				options=self.CHECKER_OPTIONS,
				allowMultiple=True,
				defaultValue=0
			)
		)

		# Define the outputs for the algorithm
		self.addParameter(
			QgsProcessingParameterFileDestination(
				self.OUTPUT,
				self.tr("Output File"),
				fileFilter="Text files (*.txt)"
			)
		)

   
	def processAlgorithm(self, parameters, context, feedback):

		# Retrieve the values of the parameters
		file_path = self.parameterAsFile(parameters, self.INPUT, context)
		dictionary = self.DICTIONARY_OPTIONS[self.parameterAsEnum(parameters, self.DICTIONARY, context)]
		checkers_selected_indices = self.parameterAsEnums(parameters, self.CHECKERS, context)
		checkers_selected = [self.CHECKER_OPTIONS[i] for i in checkers_selected_indices]
		output_file = self.parameterAsFileOutput(parameters, self.OUTPUT, context)

		# directory_path = os.path.dirname(file_path)
		file_name = os.path.basename(file_path)
		url = 'https://agsapi.bgs.ac.uk/validate/'
		fmt = 'text'
		
		with open(file_path, 'rb') as f:
			file_content = f.read()
		
		files = {'files': (file_name, file_content, 'multipart/form-data')}

		if dictionary == 'None':
			dictionary = 'v4_1_1'
		
		payload = {
			'std_dictionary': dictionary,
			'checkers': checkers_selected,
			'fmt': fmt
		}
		
		response = requests.post(url, data=payload, files=files)
		
		if response.status_code == 200:
			# API call was successful
			data = response.text
			feedback.pushInfo('API call was successful. Response: {}'.format(data))
			with open(output_file, 'w') as f:
				f.write(data)
		else:
			# API call failed, handle the error
			feedback.reportError('Error calling API: status code {}'.format(response.status_code))
			raise Exception('Error calling API: status code {}'.format(response.status_code))



		# Return the outputs of the algorithm
		return {self.OUTPUT: output_file}

	
	def processing_log(self, message):
		"""
		Logs a message to the Processing log.
		"""
		self.logMessage(message)

	def name(self):
		"""
		Returns the algorithm name, used for identifying the algorithm. This
		string should be fixed for the algorithm, and must not be localised.
		The name should be unique within each provider. Names should contain
		lowercase alphanumeric characters only and no spaces or other
		formatting characters.
		"""
		return 'AGS validator'

	def displayName(self):
		"""
		Returns the translated algorithm name, which should be used for any
		user-visible display of the algorithm name.
		"""
		return self.tr(self.name())

	def group(self):
		"""
		Returns the name of the group this algorithm belongs to. This string
		should be localised.
		"""
		return self.tr(self.groupId())

	def groupId(self):
		"""
		Returns the unique ID of the group this algorithm belongs to. This
		string should be fixed for the algorithm, and must not be localised.
		The group id should be unique within each provider. Group id should
		contain lowercase alphanumeric characters only and no spaces or other
		formatting characters.
		"""
		return ''

	def tr(self, string):
		return QCoreApplication.translate('Processing', string)

	def createInstance(self):
		return AGSValidatorAlgorithm()
